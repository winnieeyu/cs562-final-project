import subprocess


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    body = """
    import datetime
    import pandas as pd
    import numpy as np
    # for row in cur:
    #     if row['quant'] > 10:
    #         _global.append(row)

    phi_operands = {
        "S": [],    # S = list of project attributes for the query output 
        "n": 0,     # N = number of grouping variables 
        "v": [],    # V = list of grouping attributes 
        "F": [],      # F-VECT (list/vector of agg. functions)
        "pred_list": []        # list of predicate variables 
    } 

    # define our schema data in a dictionary - don't need this for the algorithm sake. Just check the values as you go for the algorithms
    schema = {
        "cust": str,
        "prod": str,
        "day": int,
        "month": int, 
        "year": int, 
        "state": str,
        "quant": int, 
        "date": datetime    
    }

    # ask for input from user and specify data type 
    # read our file to get the phi operands
    list = []
    with open('testing.txt', 'r') as file:
        for line in file: 
            list.append(line.strip())

    count = 0
    for key in phi_operands:
        # current_value = phi_operands[key]
        if key == "S":
            s_list = list[count].split(", ")
            phi_operands[key].extend(s_list)
            count += 1
        elif key == "n":
            phi_operands[key] += int(list[count])
            count += 1
        elif key == "v":
            if list[count].find(",") != -1:
                v_list = list[count].split(", ")
                phi_operands[key].extend(v_list)
            else:
                phi_operands[key].append(list[count])
            count += 1 
        elif key == "F": 
            f_list = list[count].split(", ")
            phi_operands[key].extend(f_list)
            count += 1 
        elif key == "pred_list":
            p_list = list[count].split("; ")
            phi_operands[key].extend(p_list)
            count += 1 

    print(phi_operands)
    
    # create our mf structure to store grouping attributes and aggregate functions 
    # use list of grouping attributes (v) and list of aggregate functions (F) to get list of all possible cust combinations 
    
    gA_list = phi_operands.get("v")
    agg_list = phi_operands.get("F")
    # S_list = whole_select.split(", ")

    print(gA_list)
    print(agg_list)

    count_gA = 1
    count_agg = 1
    
    for i in gA_list:
        result = "groupingAttribute{} = {}".format(count_gA, i)
        print(result)
        count_gA += 1
    for i in agg_list: 
        result = "aggregate{} = {}".format(count_agg, i)
        print(result)
        count_agg += 1

        
    for row in cur: 
        if row not in _global:
            _global.append(row)

    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    # user = os.getenv('USER')
    # password = os.getenv('PASSWORD')
    # dbname = os.getenv('DBNAME')

    conn = psycopg2.connect(dbname="postgres", user="postgres", password="Win.yu25")
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
