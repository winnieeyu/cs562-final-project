
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    # user = os.getenv('USER')
    # password = os.getenv('PASSWORD')
    # dbname = os.getenv('DBNAME')

    conn = psycopg2.connect(dbname="postgres", user="postgres", password="Win.yu25")
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    import datetime
    # for row in cur:
    #     if row['quant'] > 10:
    #         _global.append(row)

    phi_operands = {
        "S": "",    # S = list of project attributes for the query output 
        "n": "",     # N = number of grouping variables 
        "v": "",    # V = list of grouping attributes 
        "F": "" ,      # F-VECT (list/vector of agg. functions)
        "pred_list": ""        # list of predicate variables 
    } 

    # define our schema data in a dictionary
    schema = {
        "cust": str,
        "prod": str,
        "day": int,
        "month": int, 
        "year": int, 
        "state": str,
        "quant": int, 
        "date": datetime    
    }

    # read our file to get the phi operands
    list = []
    with open('testing.txt', 'r') as file:
        for line in file: 
            list.append(line.strip())

    count = 0
    for key in phi_operands:
        phi_operands[key] += list[count]
        count += 1
    
    # create our mf structure
    whole_select = phi_operands.get("S")
    S_list = whole_select.split(", ")

    gA = "groupingAttribute"
    agg = "aggregate"
    count_gA = 1
    count_agg = 1
    
    for i in S_list:
        if i in phi_operands.get("v"):
            str_gA = str(count_gA)
            temp_str_gA = gA + str_gA
            print(temp_str_gA + " = " + i)
            count_gA += 1
        else: 
            str_agg = str(count_agg)
            temp_str_agg = agg + str_agg
            print(temp_str_agg + " = " + i)
            count_agg += 1
   
    
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    